use anyhow::Context as _;
use poise::serenity_prelude as serenity;
use serenity::async_trait;
use serenity::builder::CreateMessage;
use serenity::model::channel::Message;
use serenity::model::gateway::Ready;
use serenity::model::id::UserId;
use serenity::prelude::*;
use serenity::utils::MessageBuilder;
use shuttle_runtime::SecretStore;
use tracing::{error, info};

/* TODOs
DONEPROJ: Basics
    DONE: Add Help Command
    DONE: Add Versions
    DONE: Add ChangeLog
PROJ: Moderation Commands
    TODO: Verbal Warning Command
CANNED: Updates
    TODO: Utility Bot Changelog as a channel
    TODO: Update Changelog command
 */

// Bot Settings
const NAME: &str = "KamFurDev's Utility Bot";
const COMMAND_PREFIX: &str = ";";
const VERSION: &str = "v0.0.2-alpha";

// Channels
const LOG_CHANNEL: i64 = 1314766735030747218;

// Roles
const OWNER_ROLES: [i64; 2] = [1314451651704393770, 1314451866289176616]; // owner and co-owner
const ADMIN_ROLE: i64 = 1314453508409262130;
const HIGHER_MOD_ROLE: i64 = 1320629413154525265; // higher ranked mod
const MOD_ROLE: i64 = 1314454674111467602;
const TRIAL_MOD_ROLE: i64 = 1314454804369510421;

// Help Command
const HELP_COMMANDS: &str = "## Basic Commands
- `help`: shows this message
- `version`: gives the version of the bot
- `changelog`: sends the changelog to your dms
- `hello`: responds with \"world!\"
## Moderation Commands
- `/warn verbal`: gives a user a verbal warning";

// Changelog
const CHANGELOG_MSG: &str = "# Changelog
## v0.0.1-alpha
- default serenity hello world command added
- help message added
- version message added
- changelog added";

// fuckin hell i gotta do a rewrite of all my shit
struct Data {} // User data, which is stored and accessible in all command invocations
type Error = Box<dyn std::error::Error + Send + Sync>;
type Context<'a> = poise::Context<'a, Data, Error>;

/// Displays your or another user's account creation date
#[poise::command(slash_command, prefix_command)]
async fn age(
    ctx: Context<'_>,
    #[description = "Selected user"] user: Option<serenity::User>,
) -> Result<(), Error> {
    let u = user.as_ref().unwrap_or_else(|| ctx.author());
    let response = format!("{}'s account was created at {}", u.name, u.created_at());
    ctx.say(response).await?;
    Ok(())
}

fn check_command(msg: &Message, command: &str) -> bool {
    let mut full_command = "".to_owned();
    full_command.push_str(COMMAND_PREFIX);
    full_command.push_str(command);
    if msg.content.to_lowercase() == full_command {
        return true;
    }
    return false;
}

fn check_command_start(msg: &Message, command: &str) -> bool {
    let mut full_command = "".to_owned();
    full_command.push_str(COMMAND_PREFIX);
    full_command.push_str(command);
    full_command.push_str(" ");
    if msg.content.to_lowercase().contains(full_command.as_str()) {
        return true;
    }
    return false;
}

async fn on_error(error: poise::FrameworkError<'_, Data, Error>) {
    // This is our custom error handler
    // They are many errors that can occur, so we only handle the ones we want to customize
    // and forward the rest to the default handler
    match error {
        poise::FrameworkError::Setup { error, .. } => panic!("Failed to start bot: {:?}", error),
        poise::FrameworkError::Command { error, ctx, .. } => {
            println!("Error in command `{}`: {:?}", ctx.command().name, error,);
        }
        error => {
            if let Err(e) = poise::builtins::on_error(error).await {
                println!("Error while handling error: {}", e)
            }
        }
    }
}

/// mode: 0 = the regular help message, 1 = just the version
// async fn send_help_message(ctx: &Context, msg: &Message, mode: i32) {
//     if mode == 0 {
//         let response = MessageBuilder::new()
//             .push_bold_safe(NAME)
//             .push(" ")
//             .push_bold_safe(VERSION)
//             .push("\n")
//             .push("Prefix: ")
//             .push_mono_safe(COMMAND_PREFIX)
//             .push("\n")
//             .push("# Commands\n")
//             .push(HELP_COMMANDS)
//             .build();
//
//         let finish = CreateMessage::new().content(response);
//
//         if let Err(e) = msg.author.dm(&ctx.http, finish).await {
//             error!("Error sending message: {:?}", e);
//         }
//     } else if mode == 1 {
//         let response = MessageBuilder::new()
//             .push_bold_safe(NAME)
//             .push(" ")
//             .push_bold_safe(VERSION)
//             .build();
//
//         if let Err(e) = msg.channel_id.say(&ctx.http, &response).await {
//             error!("Error sending message: {:?}", e);
//         }
//     }
// }

// struct Bot;
//
// #[async_trait]
// impl EventHandler for Bot {
//     async fn message(&self, ctx: Context, msg: Message) {
//         if msg.author.bot {
//             return;
//         }
//
//         // basic shit (deprecated)
//         // if check_command(&msg, "hello") {
//         //     if let Err(e) = msg.channel_id.say(&ctx.http, "world!").await {
//         //         error!("Error sending message: {:?}", e);
//         //     }
//         // } else if check_command(&msg, "help") {
//         //     send_help_message(&ctx, &msg, 0).await;
//         // } else if check_command(&msg, "version") {
//         //     send_help_message(&ctx, &msg, 1).await;
//         // } else if check_command(&msg, "changelog") {
//         //     let response = CreateMessage::new().content(CHANGELOG_MSG);
//         //
//         //     if let Err(e) = msg.author.dm(&ctx.http, response).await {
//         //         error!("Error sending message: {:?}", e);
//         //     }
//         // }
//     }
//
//     async fn ready(&self, _: Context, ready: Ready) {
//         info!("{} is connected!", ready.user.name);
//     }
// }

#[shuttle_runtime::main]
async fn serenity(
    #[shuttle_runtime::Secrets] secrets: SecretStore,
) -> shuttle_serenity::ShuttleSerenity {
    // Get the discord token set in `Secrets.toml`
    let token = secrets
        .get("DISCORD_TOKEN")
        .context("'DISCORD_TOKEN' was not found")?;

    // Set gateway intents, which decides what events the bot will be notified about
    let intents = GatewayIntents::GUILD_MESSAGES | GatewayIntents::MESSAGE_CONTENT;

    let framework = poise::Framework::builder()
        .options(poise::FrameworkOptions {
            commands: vec![age()],
            prefix_options: poise::PrefixFrameworkOptions {
                prefix: Some(";".into()),
                ..Default::default()
            },
            // The global error handler for all error cases that may occur
            on_error: |error| Box::pin(on_error(error)),
            // This code is run before every command
            pre_command: |ctx| {
                Box::pin(async move {
                    println!("Executing command {}...", ctx.command().qualified_name);
                })
            },
            // This code is run after a command if it was successful (returned Ok)
            post_command: |ctx| {
                Box::pin(async move {
                    println!("Executed command {}!", ctx.command().qualified_name);
                })
            },
            ..Default::default()
        })
        .setup(|ctx, _ready, framework| {
            Box::pin(async move {
                println!("Logged in as {}", _ready.user.name);
                poise::builtins::register_globally(ctx, &framework.options().commands).await?;
                Ok(Data {})
            })
        })
        .build();

    let client = Client::builder(&token, intents)
        .framework(framework)
        .await
        .expect("Err creating client");

    Ok(client.into())
}
